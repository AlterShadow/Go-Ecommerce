// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/repositories/order.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "goshop/app/models"
	serializers "goshop/app/serializers"
	paging "goshop/pkg/paging"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIOrderRepository is a mock of IOrderRepository interface.
type MockIOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderRepositoryMockRecorder
}

// MockIOrderRepositoryMockRecorder is the mock recorder for MockIOrderRepository.
type MockIOrderRepositoryMockRecorder struct {
	mock *MockIOrderRepository
}

// NewMockIOrderRepository creates a new mock instance.
func NewMockIOrderRepository(ctrl *gomock.Controller) *MockIOrderRepository {
	mock := &MockIOrderRepository{ctrl: ctrl}
	mock.recorder = &MockIOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderRepository) EXPECT() *MockIOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockIOrderRepository) CreateOrder(ctx context.Context, userID string, lines []*models.OrderLine) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, lines)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockIOrderRepositoryMockRecorder) CreateOrder(ctx, userID, lines interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockIOrderRepository)(nil).CreateOrder), ctx, userID, lines)
}

// GetMyOrders mocks base method.
func (m *MockIOrderRepository) GetMyOrders(ctx context.Context, req *serializers.ListOrderReq) ([]*models.Order, *paging.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyOrders", ctx, req)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(*paging.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMyOrders indicates an expected call of GetMyOrders.
func (mr *MockIOrderRepositoryMockRecorder) GetMyOrders(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyOrders", reflect.TypeOf((*MockIOrderRepository)(nil).GetMyOrders), ctx, req)
}

// GetOrderByID mocks base method.
func (m *MockIOrderRepository) GetOrderByID(ctx context.Context, id string, preload bool) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id, preload)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockIOrderRepositoryMockRecorder) GetOrderByID(ctx, id, preload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockIOrderRepository)(nil).GetOrderByID), ctx, id, preload)
}

// UpdateOrder mocks base method.
func (m *MockIOrderRepository) UpdateOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockIOrderRepositoryMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockIOrderRepository)(nil).UpdateOrder), ctx, order)
}
